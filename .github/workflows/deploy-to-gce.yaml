# Copyright 2020 Google, LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build and Deploy to Google Compute Engine

on:
  push:
    branches:
      - 'production'

env:
  PROJECT_ID: ${{ secrets.GCE_PROJECT }}
  GCE_INSTANCE: web3-test # TODO: update to instance name
  GCE_INSTANCE_ZONE: us-east1-b # TODO: update to instance zone
  PROJECT_ENV: ${{secrets.PROJECT_ENV}}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Configure Workload Identity Federation and generate an access token.
      # - id: 'auth'
      #   name: 'Authenticate to Google Cloud'
      #   uses: 'google-github-actions/auth@v1'
      #   with:
      #     # workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
      #     # service_account: 'my-service-account@my-project.iam.gserviceaccount.com'

      # Alternative option - authentication via credentials json
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCE_SA_KEY }}'

      # Setup gcloud CLI
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker
      # Build the Docker image
      - name: Build
        run: |-
          docker build \
          --build-arg "PROJECT_ENV=${{ secrets.PROJECT_ENV }}" \
          --tag "gcr.io/$PROJECT_ID/$GCE_INSTANCE-image:$GITHUB_SHA" .

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "gcr.io/$PROJECT_ID/$GCE_INSTANCE-image:$GITHUB_SHA"
      # Add pruning and IP address update to VM startup script
      - name: Update startup script to prune and update IP address
        run: |-
          gcloud compute instances add-metadata $GCE_INSTANCE \
            --zone "$GCE_INSTANCE_ZONE" \
            --metadata=startup-script="#! /bin/bash
              docker image prune -af
              curl --location --request GET 'domains.google.com/nic/update?hostname=poc.here.news' \
                --header 'User-Agent: VM' \
                --header 'Authorization: Basic $DDNS_AUTH_STRING'"
      - name: Update Network
        run: |-
          gcloud compute instances update $GCE_INSTANCE \
            --zone "$GCE_INSTANCE_ZONE" \
            --update-labels=network=web3
      - name: Deploy
        run: |-
          gcloud compute instances update-container "$GCE_INSTANCE" \
            --zone "$GCE_INSTANCE_ZONE" \
            --container-image "gcr.io/$PROJECT_ID/$GCE_INSTANCE-image:$GITHUB_SHA"
      # Purge old images from GCR (not latest)
      - name: Purge GCR images
        run: |-
          gcloud container images list-tags gcr.io/$PROJECT_ID/$GCE_INSTANCE-image \
            --format="get(digest)" --filter="NOT tags=$GITHUB_SHA" | \
            awk -v image_path="gcr.io/$PROJECT_ID/$GCE_INSTANCE-image@" '{print image_path $1}' | \
            xargs -r gcloud container images delete --force-delete-tags --quiet
